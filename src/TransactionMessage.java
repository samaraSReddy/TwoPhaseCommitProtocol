/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransactionMessage implements org.apache.thrift.TBase<TransactionMessage, TransactionMessage._Fields>, java.io.Serializable, Cloneable, Comparable<TransactionMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransactionMessage");

  private static final org.apache.thrift.protocol.TField OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("operation", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TRANSACTIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField VOTESTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("votestatus", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransactionMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransactionMessageTupleSchemeFactory());
  }

  public String operation; // optional
  public long transactionid; // required
  public String votestatus; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATION((short)1, "operation"),
    TRANSACTIONID((short)2, "transactionid"),
    VOTESTATUS((short)3, "votestatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATION
          return OPERATION;
        case 2: // TRANSACTIONID
          return TRANSACTIONID;
        case 3: // VOTESTATUS
          return VOTESTATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRANSACTIONID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.OPERATION,_Fields.VOTESTATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATION, new org.apache.thrift.meta_data.FieldMetaData("operation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSACTIONID, new org.apache.thrift.meta_data.FieldMetaData("transactionid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VOTESTATUS, new org.apache.thrift.meta_data.FieldMetaData("votestatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransactionMessage.class, metaDataMap);
  }

  public TransactionMessage() {
  }

  public TransactionMessage(
    long transactionid)
  {
    this();
    this.transactionid = transactionid;
    setTransactionidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransactionMessage(TransactionMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOperation()) {
      this.operation = other.operation;
    }
    this.transactionid = other.transactionid;
    if (other.isSetVotestatus()) {
      this.votestatus = other.votestatus;
    }
  }

  public TransactionMessage deepCopy() {
    return new TransactionMessage(this);
  }

  @Override
  public void clear() {
    this.operation = null;
    setTransactionidIsSet(false);
    this.transactionid = 0;
    this.votestatus = null;
  }

  public String getOperation() {
    return this.operation;
  }

  public TransactionMessage setOperation(String operation) {
    this.operation = operation;
    return this;
  }

  public void unsetOperation() {
    this.operation = null;
  }

  /** Returns true if field operation is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation() {
    return this.operation != null;
  }

  public void setOperationIsSet(boolean value) {
    if (!value) {
      this.operation = null;
    }
  }

  public long getTransactionid() {
    return this.transactionid;
  }

  public TransactionMessage setTransactionid(long transactionid) {
    this.transactionid = transactionid;
    setTransactionidIsSet(true);
    return this;
  }

  public void unsetTransactionid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSACTIONID_ISSET_ID);
  }

  /** Returns true if field transactionid is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionid() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSACTIONID_ISSET_ID);
  }

  public void setTransactionidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSACTIONID_ISSET_ID, value);
  }

  public String getVotestatus() {
    return this.votestatus;
  }

  public TransactionMessage setVotestatus(String votestatus) {
    this.votestatus = votestatus;
    return this;
  }

  public void unsetVotestatus() {
    this.votestatus = null;
  }

  /** Returns true if field votestatus is set (has been assigned a value) and false otherwise */
  public boolean isSetVotestatus() {
    return this.votestatus != null;
  }

  public void setVotestatusIsSet(boolean value) {
    if (!value) {
      this.votestatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATION:
      if (value == null) {
        unsetOperation();
      } else {
        setOperation((String)value);
      }
      break;

    case TRANSACTIONID:
      if (value == null) {
        unsetTransactionid();
      } else {
        setTransactionid((Long)value);
      }
      break;

    case VOTESTATUS:
      if (value == null) {
        unsetVotestatus();
      } else {
        setVotestatus((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATION:
      return getOperation();

    case TRANSACTIONID:
      return Long.valueOf(getTransactionid());

    case VOTESTATUS:
      return getVotestatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATION:
      return isSetOperation();
    case TRANSACTIONID:
      return isSetTransactionid();
    case VOTESTATUS:
      return isSetVotestatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransactionMessage)
      return this.equals((TransactionMessage)that);
    return false;
  }

  public boolean equals(TransactionMessage that) {
    if (that == null)
      return false;

    boolean this_present_operation = true && this.isSetOperation();
    boolean that_present_operation = true && that.isSetOperation();
    if (this_present_operation || that_present_operation) {
      if (!(this_present_operation && that_present_operation))
        return false;
      if (!this.operation.equals(that.operation))
        return false;
    }

    boolean this_present_transactionid = true;
    boolean that_present_transactionid = true;
    if (this_present_transactionid || that_present_transactionid) {
      if (!(this_present_transactionid && that_present_transactionid))
        return false;
      if (this.transactionid != that.transactionid)
        return false;
    }

    boolean this_present_votestatus = true && this.isSetVotestatus();
    boolean that_present_votestatus = true && that.isSetVotestatus();
    if (this_present_votestatus || that_present_votestatus) {
      if (!(this_present_votestatus && that_present_votestatus))
        return false;
      if (!this.votestatus.equals(that.votestatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TransactionMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperation()).compareTo(other.isSetOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation, other.operation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionid()).compareTo(other.isSetTransactionid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionid, other.transactionid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVotestatus()).compareTo(other.isSetVotestatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVotestatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.votestatus, other.votestatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransactionMessage(");
    boolean first = true;

    if (isSetOperation()) {
      sb.append("operation:");
      if (this.operation == null) {
        sb.append("null");
      } else {
        sb.append(this.operation);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("transactionid:");
    sb.append(this.transactionid);
    first = false;
    if (isSetVotestatus()) {
      if (!first) sb.append(", ");
      sb.append("votestatus:");
      if (this.votestatus == null) {
        sb.append("null");
      } else {
        sb.append(this.votestatus);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'transactionid' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionMessageStandardSchemeFactory implements SchemeFactory {
    public TransactionMessageStandardScheme getScheme() {
      return new TransactionMessageStandardScheme();
    }
  }

  private static class TransactionMessageStandardScheme extends StandardScheme<TransactionMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransactionMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operation = iprot.readString();
              struct.setOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANSACTIONID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transactionid = iprot.readI64();
              struct.setTransactionidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VOTESTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.votestatus = iprot.readString();
              struct.setVotestatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTransactionid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transactionid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransactionMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.operation != null) {
        if (struct.isSetOperation()) {
          oprot.writeFieldBegin(OPERATION_FIELD_DESC);
          oprot.writeString(struct.operation);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(TRANSACTIONID_FIELD_DESC);
      oprot.writeI64(struct.transactionid);
      oprot.writeFieldEnd();
      if (struct.votestatus != null) {
        if (struct.isSetVotestatus()) {
          oprot.writeFieldBegin(VOTESTATUS_FIELD_DESC);
          oprot.writeString(struct.votestatus);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionMessageTupleSchemeFactory implements SchemeFactory {
    public TransactionMessageTupleScheme getScheme() {
      return new TransactionMessageTupleScheme();
    }
  }

  private static class TransactionMessageTupleScheme extends TupleScheme<TransactionMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransactionMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.transactionid);
      BitSet optionals = new BitSet();
      if (struct.isSetOperation()) {
        optionals.set(0);
      }
      if (struct.isSetVotestatus()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetOperation()) {
        oprot.writeString(struct.operation);
      }
      if (struct.isSetVotestatus()) {
        oprot.writeString(struct.votestatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransactionMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.transactionid = iprot.readI64();
      struct.setTransactionidIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.operation = iprot.readString();
        struct.setOperationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.votestatus = iprot.readString();
        struct.setVotestatusIsSet(true);
      }
    }
  }

}

