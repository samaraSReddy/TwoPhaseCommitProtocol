/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ParticipantReplica implements org.apache.thrift.TBase<ParticipantReplica, ParticipantReplica._Fields>, java.io.Serializable, Cloneable, Comparable<ParticipantReplica> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParticipantReplica");

  private static final org.apache.thrift.protocol.TField REPLICANAME_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REPLICA_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaIp", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REPLICA_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaPort", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ParticipantReplicaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ParticipantReplicaTupleSchemeFactory());
  }

  public String replicaname; // required
  public String replicaIp; // required
  public int replicaPort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPLICANAME((short)1, "replicaname"),
    REPLICA_IP((short)2, "replicaIp"),
    REPLICA_PORT((short)3, "replicaPort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLICANAME
          return REPLICANAME;
        case 2: // REPLICA_IP
          return REPLICA_IP;
        case 3: // REPLICA_PORT
          return REPLICA_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPLICAPORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLICANAME, new org.apache.thrift.meta_data.FieldMetaData("replicaname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLICA_IP, new org.apache.thrift.meta_data.FieldMetaData("replicaIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLICA_PORT, new org.apache.thrift.meta_data.FieldMetaData("replicaPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ParticipantReplica.class, metaDataMap);
  }

  public ParticipantReplica() {
  }

  public ParticipantReplica(
    String replicaname,
    String replicaIp,
    int replicaPort)
  {
    this();
    this.replicaname = replicaname;
    this.replicaIp = replicaIp;
    this.replicaPort = replicaPort;
    setReplicaPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ParticipantReplica(ParticipantReplica other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReplicaname()) {
      this.replicaname = other.replicaname;
    }
    if (other.isSetReplicaIp()) {
      this.replicaIp = other.replicaIp;
    }
    this.replicaPort = other.replicaPort;
  }

  public ParticipantReplica deepCopy() {
    return new ParticipantReplica(this);
  }

  @Override
  public void clear() {
    this.replicaname = null;
    this.replicaIp = null;
    setReplicaPortIsSet(false);
    this.replicaPort = 0;
  }

  public String getReplicaname() {
    return this.replicaname;
  }

  public ParticipantReplica setReplicaname(String replicaname) {
    this.replicaname = replicaname;
    return this;
  }

  public void unsetReplicaname() {
    this.replicaname = null;
  }

  /** Returns true if field replicaname is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicaname() {
    return this.replicaname != null;
  }

  public void setReplicanameIsSet(boolean value) {
    if (!value) {
      this.replicaname = null;
    }
  }

  public String getReplicaIp() {
    return this.replicaIp;
  }

  public ParticipantReplica setReplicaIp(String replicaIp) {
    this.replicaIp = replicaIp;
    return this;
  }

  public void unsetReplicaIp() {
    this.replicaIp = null;
  }

  /** Returns true if field replicaIp is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicaIp() {
    return this.replicaIp != null;
  }

  public void setReplicaIpIsSet(boolean value) {
    if (!value) {
      this.replicaIp = null;
    }
  }

  public int getReplicaPort() {
    return this.replicaPort;
  }

  public ParticipantReplica setReplicaPort(int replicaPort) {
    this.replicaPort = replicaPort;
    setReplicaPortIsSet(true);
    return this;
  }

  public void unsetReplicaPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICAPORT_ISSET_ID);
  }

  /** Returns true if field replicaPort is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicaPort() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLICAPORT_ISSET_ID);
  }

  public void setReplicaPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICAPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPLICANAME:
      if (value == null) {
        unsetReplicaname();
      } else {
        setReplicaname((String)value);
      }
      break;

    case REPLICA_IP:
      if (value == null) {
        unsetReplicaIp();
      } else {
        setReplicaIp((String)value);
      }
      break;

    case REPLICA_PORT:
      if (value == null) {
        unsetReplicaPort();
      } else {
        setReplicaPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLICANAME:
      return getReplicaname();

    case REPLICA_IP:
      return getReplicaIp();

    case REPLICA_PORT:
      return Integer.valueOf(getReplicaPort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPLICANAME:
      return isSetReplicaname();
    case REPLICA_IP:
      return isSetReplicaIp();
    case REPLICA_PORT:
      return isSetReplicaPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ParticipantReplica)
      return this.equals((ParticipantReplica)that);
    return false;
  }

  public boolean equals(ParticipantReplica that) {
    if (that == null)
      return false;

    boolean this_present_replicaname = true && this.isSetReplicaname();
    boolean that_present_replicaname = true && that.isSetReplicaname();
    if (this_present_replicaname || that_present_replicaname) {
      if (!(this_present_replicaname && that_present_replicaname))
        return false;
      if (!this.replicaname.equals(that.replicaname))
        return false;
    }

    boolean this_present_replicaIp = true && this.isSetReplicaIp();
    boolean that_present_replicaIp = true && that.isSetReplicaIp();
    if (this_present_replicaIp || that_present_replicaIp) {
      if (!(this_present_replicaIp && that_present_replicaIp))
        return false;
      if (!this.replicaIp.equals(that.replicaIp))
        return false;
    }

    boolean this_present_replicaPort = true;
    boolean that_present_replicaPort = true;
    if (this_present_replicaPort || that_present_replicaPort) {
      if (!(this_present_replicaPort && that_present_replicaPort))
        return false;
      if (this.replicaPort != that.replicaPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ParticipantReplica other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReplicaname()).compareTo(other.isSetReplicaname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicaname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaname, other.replicaname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplicaIp()).compareTo(other.isSetReplicaIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicaIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaIp, other.replicaIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplicaPort()).compareTo(other.isSetReplicaPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicaPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaPort, other.replicaPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ParticipantReplica(");
    boolean first = true;

    sb.append("replicaname:");
    if (this.replicaname == null) {
      sb.append("null");
    } else {
      sb.append(this.replicaname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replicaIp:");
    if (this.replicaIp == null) {
      sb.append("null");
    } else {
      sb.append(this.replicaIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replicaPort:");
    sb.append(this.replicaPort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ParticipantReplicaStandardSchemeFactory implements SchemeFactory {
    public ParticipantReplicaStandardScheme getScheme() {
      return new ParticipantReplicaStandardScheme();
    }
  }

  private static class ParticipantReplicaStandardScheme extends StandardScheme<ParticipantReplica> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ParticipantReplica struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLICANAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replicaname = iprot.readString();
              struct.setReplicanameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPLICA_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replicaIp = iprot.readString();
              struct.setReplicaIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLICA_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replicaPort = iprot.readI32();
              struct.setReplicaPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ParticipantReplica struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.replicaname != null) {
        oprot.writeFieldBegin(REPLICANAME_FIELD_DESC);
        oprot.writeString(struct.replicaname);
        oprot.writeFieldEnd();
      }
      if (struct.replicaIp != null) {
        oprot.writeFieldBegin(REPLICA_IP_FIELD_DESC);
        oprot.writeString(struct.replicaIp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPLICA_PORT_FIELD_DESC);
      oprot.writeI32(struct.replicaPort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ParticipantReplicaTupleSchemeFactory implements SchemeFactory {
    public ParticipantReplicaTupleScheme getScheme() {
      return new ParticipantReplicaTupleScheme();
    }
  }

  private static class ParticipantReplicaTupleScheme extends TupleScheme<ParticipantReplica> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ParticipantReplica struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReplicaname()) {
        optionals.set(0);
      }
      if (struct.isSetReplicaIp()) {
        optionals.set(1);
      }
      if (struct.isSetReplicaPort()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetReplicaname()) {
        oprot.writeString(struct.replicaname);
      }
      if (struct.isSetReplicaIp()) {
        oprot.writeString(struct.replicaIp);
      }
      if (struct.isSetReplicaPort()) {
        oprot.writeI32(struct.replicaPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ParticipantReplica struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.replicaname = iprot.readString();
        struct.setReplicanameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.replicaIp = iprot.readString();
        struct.setReplicaIpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.replicaPort = iprot.readI32();
        struct.setReplicaPortIsSet(true);
      }
    }
  }

}

