/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EventMessage implements org.apache.thrift.TBase<EventMessage, EventMessage._Fields>, java.io.Serializable, Cloneable, Comparable<EventMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventMessage");

  private static final org.apache.thrift.protocol.TField OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("operation", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROCESSPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("processport", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REPLICANAME_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COORDINATORIP_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinatorip", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COORDINATORPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinatorport", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PROCESSNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("processname", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ARGUMENT1_FIELD_DESC = new org.apache.thrift.protocol.TField("argument1", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ARGUMENT2_FIELD_DESC = new org.apache.thrift.protocol.TField("argument2", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EventMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EventMessageTupleSchemeFactory());
  }

  public String operation; // optional
  public int processport; // required
  public String replicaname; // optional
  public String coordinatorip; // optional
  public int coordinatorport; // optional
  public String processname; // optional
  public String argument1; // optional
  public String argument2; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATION((short)1, "operation"),
    PROCESSPORT((short)2, "processport"),
    REPLICANAME((short)3, "replicaname"),
    COORDINATORIP((short)4, "coordinatorip"),
    COORDINATORPORT((short)5, "coordinatorport"),
    PROCESSNAME((short)6, "processname"),
    ARGUMENT1((short)7, "argument1"),
    ARGUMENT2((short)8, "argument2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATION
          return OPERATION;
        case 2: // PROCESSPORT
          return PROCESSPORT;
        case 3: // REPLICANAME
          return REPLICANAME;
        case 4: // COORDINATORIP
          return COORDINATORIP;
        case 5: // COORDINATORPORT
          return COORDINATORPORT;
        case 6: // PROCESSNAME
          return PROCESSNAME;
        case 7: // ARGUMENT1
          return ARGUMENT1;
        case 8: // ARGUMENT2
          return ARGUMENT2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROCESSPORT_ISSET_ID = 0;
  private static final int __COORDINATORPORT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.OPERATION,_Fields.REPLICANAME,_Fields.COORDINATORIP,_Fields.COORDINATORPORT,_Fields.PROCESSNAME,_Fields.ARGUMENT1,_Fields.ARGUMENT2};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATION, new org.apache.thrift.meta_data.FieldMetaData("operation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESSPORT, new org.apache.thrift.meta_data.FieldMetaData("processport", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLICANAME, new org.apache.thrift.meta_data.FieldMetaData("replicaname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COORDINATORIP, new org.apache.thrift.meta_data.FieldMetaData("coordinatorip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COORDINATORPORT, new org.apache.thrift.meta_data.FieldMetaData("coordinatorport", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROCESSNAME, new org.apache.thrift.meta_data.FieldMetaData("processname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARGUMENT1, new org.apache.thrift.meta_data.FieldMetaData("argument1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARGUMENT2, new org.apache.thrift.meta_data.FieldMetaData("argument2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventMessage.class, metaDataMap);
  }

  public EventMessage() {
  }

  public EventMessage(
    int processport)
  {
    this();
    this.processport = processport;
    setProcessportIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventMessage(EventMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOperation()) {
      this.operation = other.operation;
    }
    this.processport = other.processport;
    if (other.isSetReplicaname()) {
      this.replicaname = other.replicaname;
    }
    if (other.isSetCoordinatorip()) {
      this.coordinatorip = other.coordinatorip;
    }
    this.coordinatorport = other.coordinatorport;
    if (other.isSetProcessname()) {
      this.processname = other.processname;
    }
    if (other.isSetArgument1()) {
      this.argument1 = other.argument1;
    }
    if (other.isSetArgument2()) {
      this.argument2 = other.argument2;
    }
  }

  public EventMessage deepCopy() {
    return new EventMessage(this);
  }

  @Override
  public void clear() {
    this.operation = null;
    setProcessportIsSet(false);
    this.processport = 0;
    this.replicaname = null;
    this.coordinatorip = null;
    setCoordinatorportIsSet(false);
    this.coordinatorport = 0;
    this.processname = null;
    this.argument1 = null;
    this.argument2 = null;
  }

  public String getOperation() {
    return this.operation;
  }

  public EventMessage setOperation(String operation) {
    this.operation = operation;
    return this;
  }

  public void unsetOperation() {
    this.operation = null;
  }

  /** Returns true if field operation is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation() {
    return this.operation != null;
  }

  public void setOperationIsSet(boolean value) {
    if (!value) {
      this.operation = null;
    }
  }

  public int getProcessport() {
    return this.processport;
  }

  public EventMessage setProcessport(int processport) {
    this.processport = processport;
    setProcessportIsSet(true);
    return this;
  }

  public void unsetProcessport() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCESSPORT_ISSET_ID);
  }

  /** Returns true if field processport is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessport() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCESSPORT_ISSET_ID);
  }

  public void setProcessportIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCESSPORT_ISSET_ID, value);
  }

  public String getReplicaname() {
    return this.replicaname;
  }

  public EventMessage setReplicaname(String replicaname) {
    this.replicaname = replicaname;
    return this;
  }

  public void unsetReplicaname() {
    this.replicaname = null;
  }

  /** Returns true if field replicaname is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicaname() {
    return this.replicaname != null;
  }

  public void setReplicanameIsSet(boolean value) {
    if (!value) {
      this.replicaname = null;
    }
  }

  public String getCoordinatorip() {
    return this.coordinatorip;
  }

  public EventMessage setCoordinatorip(String coordinatorip) {
    this.coordinatorip = coordinatorip;
    return this;
  }

  public void unsetCoordinatorip() {
    this.coordinatorip = null;
  }

  /** Returns true if field coordinatorip is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinatorip() {
    return this.coordinatorip != null;
  }

  public void setCoordinatoripIsSet(boolean value) {
    if (!value) {
      this.coordinatorip = null;
    }
  }

  public int getCoordinatorport() {
    return this.coordinatorport;
  }

  public EventMessage setCoordinatorport(int coordinatorport) {
    this.coordinatorport = coordinatorport;
    setCoordinatorportIsSet(true);
    return this;
  }

  public void unsetCoordinatorport() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COORDINATORPORT_ISSET_ID);
  }

  /** Returns true if field coordinatorport is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinatorport() {
    return EncodingUtils.testBit(__isset_bitfield, __COORDINATORPORT_ISSET_ID);
  }

  public void setCoordinatorportIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COORDINATORPORT_ISSET_ID, value);
  }

  public String getProcessname() {
    return this.processname;
  }

  public EventMessage setProcessname(String processname) {
    this.processname = processname;
    return this;
  }

  public void unsetProcessname() {
    this.processname = null;
  }

  /** Returns true if field processname is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessname() {
    return this.processname != null;
  }

  public void setProcessnameIsSet(boolean value) {
    if (!value) {
      this.processname = null;
    }
  }

  public String getArgument1() {
    return this.argument1;
  }

  public EventMessage setArgument1(String argument1) {
    this.argument1 = argument1;
    return this;
  }

  public void unsetArgument1() {
    this.argument1 = null;
  }

  /** Returns true if field argument1 is set (has been assigned a value) and false otherwise */
  public boolean isSetArgument1() {
    return this.argument1 != null;
  }

  public void setArgument1IsSet(boolean value) {
    if (!value) {
      this.argument1 = null;
    }
  }

  public String getArgument2() {
    return this.argument2;
  }

  public EventMessage setArgument2(String argument2) {
    this.argument2 = argument2;
    return this;
  }

  public void unsetArgument2() {
    this.argument2 = null;
  }

  /** Returns true if field argument2 is set (has been assigned a value) and false otherwise */
  public boolean isSetArgument2() {
    return this.argument2 != null;
  }

  public void setArgument2IsSet(boolean value) {
    if (!value) {
      this.argument2 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATION:
      if (value == null) {
        unsetOperation();
      } else {
        setOperation((String)value);
      }
      break;

    case PROCESSPORT:
      if (value == null) {
        unsetProcessport();
      } else {
        setProcessport((Integer)value);
      }
      break;

    case REPLICANAME:
      if (value == null) {
        unsetReplicaname();
      } else {
        setReplicaname((String)value);
      }
      break;

    case COORDINATORIP:
      if (value == null) {
        unsetCoordinatorip();
      } else {
        setCoordinatorip((String)value);
      }
      break;

    case COORDINATORPORT:
      if (value == null) {
        unsetCoordinatorport();
      } else {
        setCoordinatorport((Integer)value);
      }
      break;

    case PROCESSNAME:
      if (value == null) {
        unsetProcessname();
      } else {
        setProcessname((String)value);
      }
      break;

    case ARGUMENT1:
      if (value == null) {
        unsetArgument1();
      } else {
        setArgument1((String)value);
      }
      break;

    case ARGUMENT2:
      if (value == null) {
        unsetArgument2();
      } else {
        setArgument2((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATION:
      return getOperation();

    case PROCESSPORT:
      return Integer.valueOf(getProcessport());

    case REPLICANAME:
      return getReplicaname();

    case COORDINATORIP:
      return getCoordinatorip();

    case COORDINATORPORT:
      return Integer.valueOf(getCoordinatorport());

    case PROCESSNAME:
      return getProcessname();

    case ARGUMENT1:
      return getArgument1();

    case ARGUMENT2:
      return getArgument2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATION:
      return isSetOperation();
    case PROCESSPORT:
      return isSetProcessport();
    case REPLICANAME:
      return isSetReplicaname();
    case COORDINATORIP:
      return isSetCoordinatorip();
    case COORDINATORPORT:
      return isSetCoordinatorport();
    case PROCESSNAME:
      return isSetProcessname();
    case ARGUMENT1:
      return isSetArgument1();
    case ARGUMENT2:
      return isSetArgument2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventMessage)
      return this.equals((EventMessage)that);
    return false;
  }

  public boolean equals(EventMessage that) {
    if (that == null)
      return false;

    boolean this_present_operation = true && this.isSetOperation();
    boolean that_present_operation = true && that.isSetOperation();
    if (this_present_operation || that_present_operation) {
      if (!(this_present_operation && that_present_operation))
        return false;
      if (!this.operation.equals(that.operation))
        return false;
    }

    boolean this_present_processport = true;
    boolean that_present_processport = true;
    if (this_present_processport || that_present_processport) {
      if (!(this_present_processport && that_present_processport))
        return false;
      if (this.processport != that.processport)
        return false;
    }

    boolean this_present_replicaname = true && this.isSetReplicaname();
    boolean that_present_replicaname = true && that.isSetReplicaname();
    if (this_present_replicaname || that_present_replicaname) {
      if (!(this_present_replicaname && that_present_replicaname))
        return false;
      if (!this.replicaname.equals(that.replicaname))
        return false;
    }

    boolean this_present_coordinatorip = true && this.isSetCoordinatorip();
    boolean that_present_coordinatorip = true && that.isSetCoordinatorip();
    if (this_present_coordinatorip || that_present_coordinatorip) {
      if (!(this_present_coordinatorip && that_present_coordinatorip))
        return false;
      if (!this.coordinatorip.equals(that.coordinatorip))
        return false;
    }

    boolean this_present_coordinatorport = true && this.isSetCoordinatorport();
    boolean that_present_coordinatorport = true && that.isSetCoordinatorport();
    if (this_present_coordinatorport || that_present_coordinatorport) {
      if (!(this_present_coordinatorport && that_present_coordinatorport))
        return false;
      if (this.coordinatorport != that.coordinatorport)
        return false;
    }

    boolean this_present_processname = true && this.isSetProcessname();
    boolean that_present_processname = true && that.isSetProcessname();
    if (this_present_processname || that_present_processname) {
      if (!(this_present_processname && that_present_processname))
        return false;
      if (!this.processname.equals(that.processname))
        return false;
    }

    boolean this_present_argument1 = true && this.isSetArgument1();
    boolean that_present_argument1 = true && that.isSetArgument1();
    if (this_present_argument1 || that_present_argument1) {
      if (!(this_present_argument1 && that_present_argument1))
        return false;
      if (!this.argument1.equals(that.argument1))
        return false;
    }

    boolean this_present_argument2 = true && this.isSetArgument2();
    boolean that_present_argument2 = true && that.isSetArgument2();
    if (this_present_argument2 || that_present_argument2) {
      if (!(this_present_argument2 && that_present_argument2))
        return false;
      if (!this.argument2.equals(that.argument2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EventMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperation()).compareTo(other.isSetOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation, other.operation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessport()).compareTo(other.isSetProcessport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processport, other.processport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplicaname()).compareTo(other.isSetReplicaname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicaname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaname, other.replicaname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordinatorip()).compareTo(other.isSetCoordinatorip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinatorip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinatorip, other.coordinatorip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordinatorport()).compareTo(other.isSetCoordinatorport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinatorport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinatorport, other.coordinatorport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessname()).compareTo(other.isSetProcessname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processname, other.processname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgument1()).compareTo(other.isSetArgument1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgument1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argument1, other.argument1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgument2()).compareTo(other.isSetArgument2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgument2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argument2, other.argument2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventMessage(");
    boolean first = true;

    if (isSetOperation()) {
      sb.append("operation:");
      if (this.operation == null) {
        sb.append("null");
      } else {
        sb.append(this.operation);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("processport:");
    sb.append(this.processport);
    first = false;
    if (isSetReplicaname()) {
      if (!first) sb.append(", ");
      sb.append("replicaname:");
      if (this.replicaname == null) {
        sb.append("null");
      } else {
        sb.append(this.replicaname);
      }
      first = false;
    }
    if (isSetCoordinatorip()) {
      if (!first) sb.append(", ");
      sb.append("coordinatorip:");
      if (this.coordinatorip == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinatorip);
      }
      first = false;
    }
    if (isSetCoordinatorport()) {
      if (!first) sb.append(", ");
      sb.append("coordinatorport:");
      sb.append(this.coordinatorport);
      first = false;
    }
    if (isSetProcessname()) {
      if (!first) sb.append(", ");
      sb.append("processname:");
      if (this.processname == null) {
        sb.append("null");
      } else {
        sb.append(this.processname);
      }
      first = false;
    }
    if (isSetArgument1()) {
      if (!first) sb.append(", ");
      sb.append("argument1:");
      if (this.argument1 == null) {
        sb.append("null");
      } else {
        sb.append(this.argument1);
      }
      first = false;
    }
    if (isSetArgument2()) {
      if (!first) sb.append(", ");
      sb.append("argument2:");
      if (this.argument2 == null) {
        sb.append("null");
      } else {
        sb.append(this.argument2);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'processport' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EventMessageStandardSchemeFactory implements SchemeFactory {
    public EventMessageStandardScheme getScheme() {
      return new EventMessageStandardScheme();
    }
  }

  private static class EventMessageStandardScheme extends StandardScheme<EventMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EventMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operation = iprot.readString();
              struct.setOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROCESSPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.processport = iprot.readI32();
              struct.setProcessportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLICANAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replicaname = iprot.readString();
              struct.setReplicanameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COORDINATORIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coordinatorip = iprot.readString();
              struct.setCoordinatoripIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COORDINATORPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coordinatorport = iprot.readI32();
              struct.setCoordinatorportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROCESSNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processname = iprot.readString();
              struct.setProcessnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ARGUMENT1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.argument1 = iprot.readString();
              struct.setArgument1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ARGUMENT2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.argument2 = iprot.readString();
              struct.setArgument2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetProcessport()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'processport' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EventMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.operation != null) {
        if (struct.isSetOperation()) {
          oprot.writeFieldBegin(OPERATION_FIELD_DESC);
          oprot.writeString(struct.operation);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(PROCESSPORT_FIELD_DESC);
      oprot.writeI32(struct.processport);
      oprot.writeFieldEnd();
      if (struct.replicaname != null) {
        if (struct.isSetReplicaname()) {
          oprot.writeFieldBegin(REPLICANAME_FIELD_DESC);
          oprot.writeString(struct.replicaname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coordinatorip != null) {
        if (struct.isSetCoordinatorip()) {
          oprot.writeFieldBegin(COORDINATORIP_FIELD_DESC);
          oprot.writeString(struct.coordinatorip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCoordinatorport()) {
        oprot.writeFieldBegin(COORDINATORPORT_FIELD_DESC);
        oprot.writeI32(struct.coordinatorport);
        oprot.writeFieldEnd();
      }
      if (struct.processname != null) {
        if (struct.isSetProcessname()) {
          oprot.writeFieldBegin(PROCESSNAME_FIELD_DESC);
          oprot.writeString(struct.processname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.argument1 != null) {
        if (struct.isSetArgument1()) {
          oprot.writeFieldBegin(ARGUMENT1_FIELD_DESC);
          oprot.writeString(struct.argument1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.argument2 != null) {
        if (struct.isSetArgument2()) {
          oprot.writeFieldBegin(ARGUMENT2_FIELD_DESC);
          oprot.writeString(struct.argument2);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EventMessageTupleSchemeFactory implements SchemeFactory {
    public EventMessageTupleScheme getScheme() {
      return new EventMessageTupleScheme();
    }
  }

  private static class EventMessageTupleScheme extends TupleScheme<EventMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EventMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.processport);
      BitSet optionals = new BitSet();
      if (struct.isSetOperation()) {
        optionals.set(0);
      }
      if (struct.isSetReplicaname()) {
        optionals.set(1);
      }
      if (struct.isSetCoordinatorip()) {
        optionals.set(2);
      }
      if (struct.isSetCoordinatorport()) {
        optionals.set(3);
      }
      if (struct.isSetProcessname()) {
        optionals.set(4);
      }
      if (struct.isSetArgument1()) {
        optionals.set(5);
      }
      if (struct.isSetArgument2()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetOperation()) {
        oprot.writeString(struct.operation);
      }
      if (struct.isSetReplicaname()) {
        oprot.writeString(struct.replicaname);
      }
      if (struct.isSetCoordinatorip()) {
        oprot.writeString(struct.coordinatorip);
      }
      if (struct.isSetCoordinatorport()) {
        oprot.writeI32(struct.coordinatorport);
      }
      if (struct.isSetProcessname()) {
        oprot.writeString(struct.processname);
      }
      if (struct.isSetArgument1()) {
        oprot.writeString(struct.argument1);
      }
      if (struct.isSetArgument2()) {
        oprot.writeString(struct.argument2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EventMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.processport = iprot.readI32();
      struct.setProcessportIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.operation = iprot.readString();
        struct.setOperationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.replicaname = iprot.readString();
        struct.setReplicanameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.coordinatorip = iprot.readString();
        struct.setCoordinatoripIsSet(true);
      }
      if (incoming.get(3)) {
        struct.coordinatorport = iprot.readI32();
        struct.setCoordinatorportIsSet(true);
      }
      if (incoming.get(4)) {
        struct.processname = iprot.readString();
        struct.setProcessnameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.argument1 = iprot.readString();
        struct.setArgument1IsSet(true);
      }
      if (incoming.get(6)) {
        struct.argument2 = iprot.readString();
        struct.setArgument2IsSet(true);
      }
    }
  }

}

