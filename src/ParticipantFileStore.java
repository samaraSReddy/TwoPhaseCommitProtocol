/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ParticipantFileStore {

  public interface Iface {

    public void writeFile(RFile rFile, TransactionMessage transactionmessage) throws org.apache.thrift.TException;

    public void doCommit(TransactionMessage transactionmessage) throws org.apache.thrift.TException;

    public void doAbort(TransactionMessage transactionmessage) throws org.apache.thrift.TException;

    public void canCommit(TransactionMessage transactionmessage) throws org.apache.thrift.TException;

    public void initializeTestCase(int testcase) throws org.apache.thrift.TException;

    public RFile readFile(String filename) throws SystemException, org.apache.thrift.TException;

    public TransactionMessage getDecision(TransactionMessage transactionMessage) throws SystemException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void writeFile(RFile rFile, TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doCommit(TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doAbort(TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void canCommit(TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void initializeTestCase(int testcase, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void readFile(String filename, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDecision(TransactionMessage transactionMessage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void writeFile(RFile rFile, TransactionMessage transactionmessage) throws org.apache.thrift.TException
    {
      send_writeFile(rFile, transactionmessage);
    }

    public void send_writeFile(RFile rFile, TransactionMessage transactionmessage) throws org.apache.thrift.TException
    {
      writeFile_args args = new writeFile_args();
      args.setRFile(rFile);
      args.setTransactionmessage(transactionmessage);
      sendBase("writeFile", args);
    }

    public void doCommit(TransactionMessage transactionmessage) throws org.apache.thrift.TException
    {
      send_doCommit(transactionmessage);
    }

    public void send_doCommit(TransactionMessage transactionmessage) throws org.apache.thrift.TException
    {
      doCommit_args args = new doCommit_args();
      args.setTransactionmessage(transactionmessage);
      sendBase("doCommit", args);
    }

    public void doAbort(TransactionMessage transactionmessage) throws org.apache.thrift.TException
    {
      send_doAbort(transactionmessage);
    }

    public void send_doAbort(TransactionMessage transactionmessage) throws org.apache.thrift.TException
    {
      doAbort_args args = new doAbort_args();
      args.setTransactionmessage(transactionmessage);
      sendBase("doAbort", args);
    }

    public void canCommit(TransactionMessage transactionmessage) throws org.apache.thrift.TException
    {
      send_canCommit(transactionmessage);
    }

    public void send_canCommit(TransactionMessage transactionmessage) throws org.apache.thrift.TException
    {
      canCommit_args args = new canCommit_args();
      args.setTransactionmessage(transactionmessage);
      sendBase("canCommit", args);
    }

    public void initializeTestCase(int testcase) throws org.apache.thrift.TException
    {
      send_initializeTestCase(testcase);
    }

    public void send_initializeTestCase(int testcase) throws org.apache.thrift.TException
    {
      initializeTestCase_args args = new initializeTestCase_args();
      args.setTestcase(testcase);
      sendBase("initializeTestCase", args);
    }

    public RFile readFile(String filename) throws SystemException, org.apache.thrift.TException
    {
      send_readFile(filename);
      return recv_readFile();
    }

    public void send_readFile(String filename) throws org.apache.thrift.TException
    {
      readFile_args args = new readFile_args();
      args.setFilename(filename);
      sendBase("readFile", args);
    }

    public RFile recv_readFile() throws SystemException, org.apache.thrift.TException
    {
      readFile_result result = new readFile_result();
      receiveBase(result, "readFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readFile failed: unknown result");
    }

    public TransactionMessage getDecision(TransactionMessage transactionMessage) throws SystemException, org.apache.thrift.TException
    {
      send_getDecision(transactionMessage);
      return recv_getDecision();
    }

    public void send_getDecision(TransactionMessage transactionMessage) throws org.apache.thrift.TException
    {
      getDecision_args args = new getDecision_args();
      args.setTransactionMessage(transactionMessage);
      sendBase("getDecision", args);
    }

    public TransactionMessage recv_getDecision() throws SystemException, org.apache.thrift.TException
    {
      getDecision_result result = new getDecision_result();
      receiveBase(result, "getDecision");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDecision failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void writeFile(RFile rFile, TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeFile_call method_call = new writeFile_call(rFile, transactionmessage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RFile rFile;
      private TransactionMessage transactionmessage;
      public writeFile_call(RFile rFile, TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.rFile = rFile;
        this.transactionmessage = transactionmessage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeFile_args args = new writeFile_args();
        args.setRFile(rFile);
        args.setTransactionmessage(transactionmessage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void doCommit(TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doCommit_call method_call = new doCommit_call(transactionmessage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doCommit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TransactionMessage transactionmessage;
      public doCommit_call(TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.transactionmessage = transactionmessage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doCommit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doCommit_args args = new doCommit_args();
        args.setTransactionmessage(transactionmessage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void doAbort(TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doAbort_call method_call = new doAbort_call(transactionmessage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doAbort_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TransactionMessage transactionmessage;
      public doAbort_call(TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.transactionmessage = transactionmessage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doAbort", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doAbort_args args = new doAbort_args();
        args.setTransactionmessage(transactionmessage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void canCommit(TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      canCommit_call method_call = new canCommit_call(transactionmessage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class canCommit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TransactionMessage transactionmessage;
      public canCommit_call(TransactionMessage transactionmessage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.transactionmessage = transactionmessage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("canCommit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        canCommit_args args = new canCommit_args();
        args.setTransactionmessage(transactionmessage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void initializeTestCase(int testcase, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initializeTestCase_call method_call = new initializeTestCase_call(testcase, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initializeTestCase_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int testcase;
      public initializeTestCase_call(int testcase, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.testcase = testcase;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initializeTestCase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initializeTestCase_args args = new initializeTestCase_args();
        args.setTestcase(testcase);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void readFile(String filename, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readFile_call method_call = new readFile_call(filename, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filename;
      public readFile_call(String filename, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filename = filename;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readFile_args args = new readFile_args();
        args.setFilename(filename);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RFile getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readFile();
      }
    }

    public void getDecision(TransactionMessage transactionMessage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDecision_call method_call = new getDecision_call(transactionMessage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDecision_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TransactionMessage transactionMessage;
      public getDecision_call(TransactionMessage transactionMessage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transactionMessage = transactionMessage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDecision", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDecision_args args = new getDecision_args();
        args.setTransactionMessage(transactionMessage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TransactionMessage getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDecision();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("writeFile", new writeFile());
      processMap.put("doCommit", new doCommit());
      processMap.put("doAbort", new doAbort());
      processMap.put("canCommit", new canCommit());
      processMap.put("initializeTestCase", new initializeTestCase());
      processMap.put("readFile", new readFile());
      processMap.put("getDecision", new getDecision());
      return processMap;
    }

    public static class writeFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeFile_args> {
      public writeFile() {
        super("writeFile");
      }

      public writeFile_args getEmptyArgsInstance() {
        return new writeFile_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, writeFile_args args) throws org.apache.thrift.TException {
        iface.writeFile(args.rFile, args.transactionmessage);
        return null;
      }
    }

    public static class doCommit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doCommit_args> {
      public doCommit() {
        super("doCommit");
      }

      public doCommit_args getEmptyArgsInstance() {
        return new doCommit_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, doCommit_args args) throws org.apache.thrift.TException {
        iface.doCommit(args.transactionmessage);
        return null;
      }
    }

    public static class doAbort<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doAbort_args> {
      public doAbort() {
        super("doAbort");
      }

      public doAbort_args getEmptyArgsInstance() {
        return new doAbort_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, doAbort_args args) throws org.apache.thrift.TException {
        iface.doAbort(args.transactionmessage);
        return null;
      }
    }

    public static class canCommit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, canCommit_args> {
      public canCommit() {
        super("canCommit");
      }

      public canCommit_args getEmptyArgsInstance() {
        return new canCommit_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, canCommit_args args) throws org.apache.thrift.TException {
        iface.canCommit(args.transactionmessage);
        return null;
      }
    }

    public static class initializeTestCase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initializeTestCase_args> {
      public initializeTestCase() {
        super("initializeTestCase");
      }

      public initializeTestCase_args getEmptyArgsInstance() {
        return new initializeTestCase_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, initializeTestCase_args args) throws org.apache.thrift.TException {
        iface.initializeTestCase(args.testcase);
        return null;
      }
    }

    public static class readFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readFile_args> {
      public readFile() {
        super("readFile");
      }

      public readFile_args getEmptyArgsInstance() {
        return new readFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readFile_result getResult(I iface, readFile_args args) throws org.apache.thrift.TException {
        readFile_result result = new readFile_result();
        try {
          result.success = iface.readFile(args.filename);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class getDecision<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDecision_args> {
      public getDecision() {
        super("getDecision");
      }

      public getDecision_args getEmptyArgsInstance() {
        return new getDecision_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDecision_result getResult(I iface, getDecision_args args) throws org.apache.thrift.TException {
        getDecision_result result = new getDecision_result();
        try {
          result.success = iface.getDecision(args.transactionMessage);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("writeFile", new writeFile());
      processMap.put("doCommit", new doCommit());
      processMap.put("doAbort", new doAbort());
      processMap.put("canCommit", new canCommit());
      processMap.put("initializeTestCase", new initializeTestCase());
      processMap.put("readFile", new readFile());
      processMap.put("getDecision", new getDecision());
      return processMap;
    }

    public static class writeFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeFile_args, Void> {
      public writeFile() {
        super("writeFile");
      }

      public writeFile_args getEmptyArgsInstance() {
        return new writeFile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, writeFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.writeFile(args.rFile, args.transactionmessage,resultHandler);
      }
    }

    public static class doCommit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doCommit_args, Void> {
      public doCommit() {
        super("doCommit");
      }

      public doCommit_args getEmptyArgsInstance() {
        return new doCommit_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, doCommit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.doCommit(args.transactionmessage,resultHandler);
      }
    }

    public static class doAbort<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doAbort_args, Void> {
      public doAbort() {
        super("doAbort");
      }

      public doAbort_args getEmptyArgsInstance() {
        return new doAbort_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, doAbort_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.doAbort(args.transactionmessage,resultHandler);
      }
    }

    public static class canCommit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, canCommit_args, Void> {
      public canCommit() {
        super("canCommit");
      }

      public canCommit_args getEmptyArgsInstance() {
        return new canCommit_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, canCommit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.canCommit(args.transactionmessage,resultHandler);
      }
    }

    public static class initializeTestCase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initializeTestCase_args, Void> {
      public initializeTestCase() {
        super("initializeTestCase");
      }

      public initializeTestCase_args getEmptyArgsInstance() {
        return new initializeTestCase_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, initializeTestCase_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.initializeTestCase(args.testcase,resultHandler);
      }
    }

    public static class readFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readFile_args, RFile> {
      public readFile() {
        super("readFile");
      }

      public readFile_args getEmptyArgsInstance() {
        return new readFile_args();
      }

      public AsyncMethodCallback<RFile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RFile>() { 
          public void onComplete(RFile o) {
            readFile_result result = new readFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readFile_result result = new readFile_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readFile_args args, org.apache.thrift.async.AsyncMethodCallback<RFile> resultHandler) throws TException {
        iface.readFile(args.filename,resultHandler);
      }
    }

    public static class getDecision<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDecision_args, TransactionMessage> {
      public getDecision() {
        super("getDecision");
      }

      public getDecision_args getEmptyArgsInstance() {
        return new getDecision_args();
      }

      public AsyncMethodCallback<TransactionMessage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TransactionMessage>() { 
          public void onComplete(TransactionMessage o) {
            getDecision_result result = new getDecision_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDecision_result result = new getDecision_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDecision_args args, org.apache.thrift.async.AsyncMethodCallback<TransactionMessage> resultHandler) throws TException {
        iface.getDecision(args.transactionMessage,resultHandler);
      }
    }

  }

  public static class writeFile_args implements org.apache.thrift.TBase<writeFile_args, writeFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeFile_args");

    private static final org.apache.thrift.protocol.TField R_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("rFile", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSACTIONMESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionmessage", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writeFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writeFile_argsTupleSchemeFactory());
    }

    public RFile rFile; // required
    public TransactionMessage transactionmessage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      R_FILE((short)1, "rFile"),
      TRANSACTIONMESSAGE((short)2, "transactionmessage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // R_FILE
            return R_FILE;
          case 2: // TRANSACTIONMESSAGE
            return TRANSACTIONMESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.R_FILE, new org.apache.thrift.meta_data.FieldMetaData("rFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RFile.class)));
      tmpMap.put(_Fields.TRANSACTIONMESSAGE, new org.apache.thrift.meta_data.FieldMetaData("transactionmessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeFile_args.class, metaDataMap);
    }

    public writeFile_args() {
    }

    public writeFile_args(
      RFile rFile,
      TransactionMessage transactionmessage)
    {
      this();
      this.rFile = rFile;
      this.transactionmessage = transactionmessage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeFile_args(writeFile_args other) {
      if (other.isSetRFile()) {
        this.rFile = new RFile(other.rFile);
      }
      if (other.isSetTransactionmessage()) {
        this.transactionmessage = new TransactionMessage(other.transactionmessage);
      }
    }

    public writeFile_args deepCopy() {
      return new writeFile_args(this);
    }

    @Override
    public void clear() {
      this.rFile = null;
      this.transactionmessage = null;
    }

    public RFile getRFile() {
      return this.rFile;
    }

    public writeFile_args setRFile(RFile rFile) {
      this.rFile = rFile;
      return this;
    }

    public void unsetRFile() {
      this.rFile = null;
    }

    /** Returns true if field rFile is set (has been assigned a value) and false otherwise */
    public boolean isSetRFile() {
      return this.rFile != null;
    }

    public void setRFileIsSet(boolean value) {
      if (!value) {
        this.rFile = null;
      }
    }

    public TransactionMessage getTransactionmessage() {
      return this.transactionmessage;
    }

    public writeFile_args setTransactionmessage(TransactionMessage transactionmessage) {
      this.transactionmessage = transactionmessage;
      return this;
    }

    public void unsetTransactionmessage() {
      this.transactionmessage = null;
    }

    /** Returns true if field transactionmessage is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactionmessage() {
      return this.transactionmessage != null;
    }

    public void setTransactionmessageIsSet(boolean value) {
      if (!value) {
        this.transactionmessage = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case R_FILE:
        if (value == null) {
          unsetRFile();
        } else {
          setRFile((RFile)value);
        }
        break;

      case TRANSACTIONMESSAGE:
        if (value == null) {
          unsetTransactionmessage();
        } else {
          setTransactionmessage((TransactionMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case R_FILE:
        return getRFile();

      case TRANSACTIONMESSAGE:
        return getTransactionmessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case R_FILE:
        return isSetRFile();
      case TRANSACTIONMESSAGE:
        return isSetTransactionmessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeFile_args)
        return this.equals((writeFile_args)that);
      return false;
    }

    public boolean equals(writeFile_args that) {
      if (that == null)
        return false;

      boolean this_present_rFile = true && this.isSetRFile();
      boolean that_present_rFile = true && that.isSetRFile();
      if (this_present_rFile || that_present_rFile) {
        if (!(this_present_rFile && that_present_rFile))
          return false;
        if (!this.rFile.equals(that.rFile))
          return false;
      }

      boolean this_present_transactionmessage = true && this.isSetTransactionmessage();
      boolean that_present_transactionmessage = true && that.isSetTransactionmessage();
      if (this_present_transactionmessage || that_present_transactionmessage) {
        if (!(this_present_transactionmessage && that_present_transactionmessage))
          return false;
        if (!this.transactionmessage.equals(that.transactionmessage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(writeFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRFile()).compareTo(other.isSetRFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rFile, other.rFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransactionmessage()).compareTo(other.isSetTransactionmessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactionmessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionmessage, other.transactionmessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeFile_args(");
      boolean first = true;

      sb.append("rFile:");
      if (this.rFile == null) {
        sb.append("null");
      } else {
        sb.append(this.rFile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transactionmessage:");
      if (this.transactionmessage == null) {
        sb.append("null");
      } else {
        sb.append(this.transactionmessage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rFile != null) {
        rFile.validate();
      }
      if (transactionmessage != null) {
        transactionmessage.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeFile_argsStandardSchemeFactory implements SchemeFactory {
      public writeFile_argsStandardScheme getScheme() {
        return new writeFile_argsStandardScheme();
      }
    }

    private static class writeFile_argsStandardScheme extends StandardScheme<writeFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // R_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rFile = new RFile();
                struct.rFile.read(iprot);
                struct.setRFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSACTIONMESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transactionmessage = new TransactionMessage();
                struct.transactionmessage.read(iprot);
                struct.setTransactionmessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rFile != null) {
          oprot.writeFieldBegin(R_FILE_FIELD_DESC);
          struct.rFile.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.transactionmessage != null) {
          oprot.writeFieldBegin(TRANSACTIONMESSAGE_FIELD_DESC);
          struct.transactionmessage.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeFile_argsTupleSchemeFactory implements SchemeFactory {
      public writeFile_argsTupleScheme getScheme() {
        return new writeFile_argsTupleScheme();
      }
    }

    private static class writeFile_argsTupleScheme extends TupleScheme<writeFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRFile()) {
          optionals.set(0);
        }
        if (struct.isSetTransactionmessage()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRFile()) {
          struct.rFile.write(oprot);
        }
        if (struct.isSetTransactionmessage()) {
          struct.transactionmessage.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rFile = new RFile();
          struct.rFile.read(iprot);
          struct.setRFileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.transactionmessage = new TransactionMessage();
          struct.transactionmessage.read(iprot);
          struct.setTransactionmessageIsSet(true);
        }
      }
    }

  }

  public static class doCommit_args implements org.apache.thrift.TBase<doCommit_args, doCommit_args._Fields>, java.io.Serializable, Cloneable, Comparable<doCommit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doCommit_args");

    private static final org.apache.thrift.protocol.TField TRANSACTIONMESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionmessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doCommit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doCommit_argsTupleSchemeFactory());
    }

    public TransactionMessage transactionmessage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSACTIONMESSAGE((short)1, "transactionmessage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSACTIONMESSAGE
            return TRANSACTIONMESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSACTIONMESSAGE, new org.apache.thrift.meta_data.FieldMetaData("transactionmessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doCommit_args.class, metaDataMap);
    }

    public doCommit_args() {
    }

    public doCommit_args(
      TransactionMessage transactionmessage)
    {
      this();
      this.transactionmessage = transactionmessage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doCommit_args(doCommit_args other) {
      if (other.isSetTransactionmessage()) {
        this.transactionmessage = new TransactionMessage(other.transactionmessage);
      }
    }

    public doCommit_args deepCopy() {
      return new doCommit_args(this);
    }

    @Override
    public void clear() {
      this.transactionmessage = null;
    }

    public TransactionMessage getTransactionmessage() {
      return this.transactionmessage;
    }

    public doCommit_args setTransactionmessage(TransactionMessage transactionmessage) {
      this.transactionmessage = transactionmessage;
      return this;
    }

    public void unsetTransactionmessage() {
      this.transactionmessage = null;
    }

    /** Returns true if field transactionmessage is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactionmessage() {
      return this.transactionmessage != null;
    }

    public void setTransactionmessageIsSet(boolean value) {
      if (!value) {
        this.transactionmessage = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSACTIONMESSAGE:
        if (value == null) {
          unsetTransactionmessage();
        } else {
          setTransactionmessage((TransactionMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSACTIONMESSAGE:
        return getTransactionmessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSACTIONMESSAGE:
        return isSetTransactionmessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doCommit_args)
        return this.equals((doCommit_args)that);
      return false;
    }

    public boolean equals(doCommit_args that) {
      if (that == null)
        return false;

      boolean this_present_transactionmessage = true && this.isSetTransactionmessage();
      boolean that_present_transactionmessage = true && that.isSetTransactionmessage();
      if (this_present_transactionmessage || that_present_transactionmessage) {
        if (!(this_present_transactionmessage && that_present_transactionmessage))
          return false;
        if (!this.transactionmessage.equals(that.transactionmessage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(doCommit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransactionmessage()).compareTo(other.isSetTransactionmessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactionmessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionmessage, other.transactionmessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doCommit_args(");
      boolean first = true;

      sb.append("transactionmessage:");
      if (this.transactionmessage == null) {
        sb.append("null");
      } else {
        sb.append(this.transactionmessage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transactionmessage != null) {
        transactionmessage.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doCommit_argsStandardSchemeFactory implements SchemeFactory {
      public doCommit_argsStandardScheme getScheme() {
        return new doCommit_argsStandardScheme();
      }
    }

    private static class doCommit_argsStandardScheme extends StandardScheme<doCommit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSACTIONMESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transactionmessage = new TransactionMessage();
                struct.transactionmessage.read(iprot);
                struct.setTransactionmessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doCommit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transactionmessage != null) {
          oprot.writeFieldBegin(TRANSACTIONMESSAGE_FIELD_DESC);
          struct.transactionmessage.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doCommit_argsTupleSchemeFactory implements SchemeFactory {
      public doCommit_argsTupleScheme getScheme() {
        return new doCommit_argsTupleScheme();
      }
    }

    private static class doCommit_argsTupleScheme extends TupleScheme<doCommit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransactionmessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransactionmessage()) {
          struct.transactionmessage.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.transactionmessage = new TransactionMessage();
          struct.transactionmessage.read(iprot);
          struct.setTransactionmessageIsSet(true);
        }
      }
    }

  }

  public static class doAbort_args implements org.apache.thrift.TBase<doAbort_args, doAbort_args._Fields>, java.io.Serializable, Cloneable, Comparable<doAbort_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doAbort_args");

    private static final org.apache.thrift.protocol.TField TRANSACTIONMESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionmessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doAbort_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doAbort_argsTupleSchemeFactory());
    }

    public TransactionMessage transactionmessage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSACTIONMESSAGE((short)1, "transactionmessage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSACTIONMESSAGE
            return TRANSACTIONMESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSACTIONMESSAGE, new org.apache.thrift.meta_data.FieldMetaData("transactionmessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doAbort_args.class, metaDataMap);
    }

    public doAbort_args() {
    }

    public doAbort_args(
      TransactionMessage transactionmessage)
    {
      this();
      this.transactionmessage = transactionmessage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doAbort_args(doAbort_args other) {
      if (other.isSetTransactionmessage()) {
        this.transactionmessage = new TransactionMessage(other.transactionmessage);
      }
    }

    public doAbort_args deepCopy() {
      return new doAbort_args(this);
    }

    @Override
    public void clear() {
      this.transactionmessage = null;
    }

    public TransactionMessage getTransactionmessage() {
      return this.transactionmessage;
    }

    public doAbort_args setTransactionmessage(TransactionMessage transactionmessage) {
      this.transactionmessage = transactionmessage;
      return this;
    }

    public void unsetTransactionmessage() {
      this.transactionmessage = null;
    }

    /** Returns true if field transactionmessage is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactionmessage() {
      return this.transactionmessage != null;
    }

    public void setTransactionmessageIsSet(boolean value) {
      if (!value) {
        this.transactionmessage = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSACTIONMESSAGE:
        if (value == null) {
          unsetTransactionmessage();
        } else {
          setTransactionmessage((TransactionMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSACTIONMESSAGE:
        return getTransactionmessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSACTIONMESSAGE:
        return isSetTransactionmessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doAbort_args)
        return this.equals((doAbort_args)that);
      return false;
    }

    public boolean equals(doAbort_args that) {
      if (that == null)
        return false;

      boolean this_present_transactionmessage = true && this.isSetTransactionmessage();
      boolean that_present_transactionmessage = true && that.isSetTransactionmessage();
      if (this_present_transactionmessage || that_present_transactionmessage) {
        if (!(this_present_transactionmessage && that_present_transactionmessage))
          return false;
        if (!this.transactionmessage.equals(that.transactionmessage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(doAbort_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransactionmessage()).compareTo(other.isSetTransactionmessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactionmessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionmessage, other.transactionmessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doAbort_args(");
      boolean first = true;

      sb.append("transactionmessage:");
      if (this.transactionmessage == null) {
        sb.append("null");
      } else {
        sb.append(this.transactionmessage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transactionmessage != null) {
        transactionmessage.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doAbort_argsStandardSchemeFactory implements SchemeFactory {
      public doAbort_argsStandardScheme getScheme() {
        return new doAbort_argsStandardScheme();
      }
    }

    private static class doAbort_argsStandardScheme extends StandardScheme<doAbort_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doAbort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSACTIONMESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transactionmessage = new TransactionMessage();
                struct.transactionmessage.read(iprot);
                struct.setTransactionmessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doAbort_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transactionmessage != null) {
          oprot.writeFieldBegin(TRANSACTIONMESSAGE_FIELD_DESC);
          struct.transactionmessage.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doAbort_argsTupleSchemeFactory implements SchemeFactory {
      public doAbort_argsTupleScheme getScheme() {
        return new doAbort_argsTupleScheme();
      }
    }

    private static class doAbort_argsTupleScheme extends TupleScheme<doAbort_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doAbort_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransactionmessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransactionmessage()) {
          struct.transactionmessage.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doAbort_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.transactionmessage = new TransactionMessage();
          struct.transactionmessage.read(iprot);
          struct.setTransactionmessageIsSet(true);
        }
      }
    }

  }

  public static class canCommit_args implements org.apache.thrift.TBase<canCommit_args, canCommit_args._Fields>, java.io.Serializable, Cloneable, Comparable<canCommit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canCommit_args");

    private static final org.apache.thrift.protocol.TField TRANSACTIONMESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionmessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new canCommit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new canCommit_argsTupleSchemeFactory());
    }

    public TransactionMessage transactionmessage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSACTIONMESSAGE((short)1, "transactionmessage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSACTIONMESSAGE
            return TRANSACTIONMESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSACTIONMESSAGE, new org.apache.thrift.meta_data.FieldMetaData("transactionmessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canCommit_args.class, metaDataMap);
    }

    public canCommit_args() {
    }

    public canCommit_args(
      TransactionMessage transactionmessage)
    {
      this();
      this.transactionmessage = transactionmessage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canCommit_args(canCommit_args other) {
      if (other.isSetTransactionmessage()) {
        this.transactionmessage = new TransactionMessage(other.transactionmessage);
      }
    }

    public canCommit_args deepCopy() {
      return new canCommit_args(this);
    }

    @Override
    public void clear() {
      this.transactionmessage = null;
    }

    public TransactionMessage getTransactionmessage() {
      return this.transactionmessage;
    }

    public canCommit_args setTransactionmessage(TransactionMessage transactionmessage) {
      this.transactionmessage = transactionmessage;
      return this;
    }

    public void unsetTransactionmessage() {
      this.transactionmessage = null;
    }

    /** Returns true if field transactionmessage is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactionmessage() {
      return this.transactionmessage != null;
    }

    public void setTransactionmessageIsSet(boolean value) {
      if (!value) {
        this.transactionmessage = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSACTIONMESSAGE:
        if (value == null) {
          unsetTransactionmessage();
        } else {
          setTransactionmessage((TransactionMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSACTIONMESSAGE:
        return getTransactionmessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSACTIONMESSAGE:
        return isSetTransactionmessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof canCommit_args)
        return this.equals((canCommit_args)that);
      return false;
    }

    public boolean equals(canCommit_args that) {
      if (that == null)
        return false;

      boolean this_present_transactionmessage = true && this.isSetTransactionmessage();
      boolean that_present_transactionmessage = true && that.isSetTransactionmessage();
      if (this_present_transactionmessage || that_present_transactionmessage) {
        if (!(this_present_transactionmessage && that_present_transactionmessage))
          return false;
        if (!this.transactionmessage.equals(that.transactionmessage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(canCommit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransactionmessage()).compareTo(other.isSetTransactionmessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactionmessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionmessage, other.transactionmessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("canCommit_args(");
      boolean first = true;

      sb.append("transactionmessage:");
      if (this.transactionmessage == null) {
        sb.append("null");
      } else {
        sb.append(this.transactionmessage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transactionmessage != null) {
        transactionmessage.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canCommit_argsStandardSchemeFactory implements SchemeFactory {
      public canCommit_argsStandardScheme getScheme() {
        return new canCommit_argsStandardScheme();
      }
    }

    private static class canCommit_argsStandardScheme extends StandardScheme<canCommit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, canCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSACTIONMESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transactionmessage = new TransactionMessage();
                struct.transactionmessage.read(iprot);
                struct.setTransactionmessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, canCommit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transactionmessage != null) {
          oprot.writeFieldBegin(TRANSACTIONMESSAGE_FIELD_DESC);
          struct.transactionmessage.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canCommit_argsTupleSchemeFactory implements SchemeFactory {
      public canCommit_argsTupleScheme getScheme() {
        return new canCommit_argsTupleScheme();
      }
    }

    private static class canCommit_argsTupleScheme extends TupleScheme<canCommit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransactionmessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransactionmessage()) {
          struct.transactionmessage.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.transactionmessage = new TransactionMessage();
          struct.transactionmessage.read(iprot);
          struct.setTransactionmessageIsSet(true);
        }
      }
    }

  }

  public static class initializeTestCase_args implements org.apache.thrift.TBase<initializeTestCase_args, initializeTestCase_args._Fields>, java.io.Serializable, Cloneable, Comparable<initializeTestCase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initializeTestCase_args");

    private static final org.apache.thrift.protocol.TField TESTCASE_FIELD_DESC = new org.apache.thrift.protocol.TField("testcase", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initializeTestCase_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initializeTestCase_argsTupleSchemeFactory());
    }

    public int testcase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TESTCASE((short)1, "testcase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TESTCASE
            return TESTCASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TESTCASE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TESTCASE, new org.apache.thrift.meta_data.FieldMetaData("testcase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initializeTestCase_args.class, metaDataMap);
    }

    public initializeTestCase_args() {
    }

    public initializeTestCase_args(
      int testcase)
    {
      this();
      this.testcase = testcase;
      setTestcaseIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initializeTestCase_args(initializeTestCase_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.testcase = other.testcase;
    }

    public initializeTestCase_args deepCopy() {
      return new initializeTestCase_args(this);
    }

    @Override
    public void clear() {
      setTestcaseIsSet(false);
      this.testcase = 0;
    }

    public int getTestcase() {
      return this.testcase;
    }

    public initializeTestCase_args setTestcase(int testcase) {
      this.testcase = testcase;
      setTestcaseIsSet(true);
      return this;
    }

    public void unsetTestcase() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTCASE_ISSET_ID);
    }

    /** Returns true if field testcase is set (has been assigned a value) and false otherwise */
    public boolean isSetTestcase() {
      return EncodingUtils.testBit(__isset_bitfield, __TESTCASE_ISSET_ID);
    }

    public void setTestcaseIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTCASE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TESTCASE:
        if (value == null) {
          unsetTestcase();
        } else {
          setTestcase((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TESTCASE:
        return Integer.valueOf(getTestcase());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TESTCASE:
        return isSetTestcase();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initializeTestCase_args)
        return this.equals((initializeTestCase_args)that);
      return false;
    }

    public boolean equals(initializeTestCase_args that) {
      if (that == null)
        return false;

      boolean this_present_testcase = true;
      boolean that_present_testcase = true;
      if (this_present_testcase || that_present_testcase) {
        if (!(this_present_testcase && that_present_testcase))
          return false;
        if (this.testcase != that.testcase)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(initializeTestCase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTestcase()).compareTo(other.isSetTestcase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTestcase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testcase, other.testcase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initializeTestCase_args(");
      boolean first = true;

      sb.append("testcase:");
      sb.append(this.testcase);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initializeTestCase_argsStandardSchemeFactory implements SchemeFactory {
      public initializeTestCase_argsStandardScheme getScheme() {
        return new initializeTestCase_argsStandardScheme();
      }
    }

    private static class initializeTestCase_argsStandardScheme extends StandardScheme<initializeTestCase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initializeTestCase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TESTCASE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.testcase = iprot.readI32();
                struct.setTestcaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initializeTestCase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TESTCASE_FIELD_DESC);
        oprot.writeI32(struct.testcase);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initializeTestCase_argsTupleSchemeFactory implements SchemeFactory {
      public initializeTestCase_argsTupleScheme getScheme() {
        return new initializeTestCase_argsTupleScheme();
      }
    }

    private static class initializeTestCase_argsTupleScheme extends TupleScheme<initializeTestCase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initializeTestCase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTestcase()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTestcase()) {
          oprot.writeI32(struct.testcase);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initializeTestCase_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.testcase = iprot.readI32();
          struct.setTestcaseIsSet(true);
        }
      }
    }

  }

  public static class readFile_args implements org.apache.thrift.TBase<readFile_args, readFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<readFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readFile_args");

    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readFile_argsTupleSchemeFactory());
    }

    public String filename; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME((short)1, "filename");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME
            return FILENAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readFile_args.class, metaDataMap);
    }

    public readFile_args() {
    }

    public readFile_args(
      String filename)
    {
      this();
      this.filename = filename;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readFile_args(readFile_args other) {
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
    }

    public readFile_args deepCopy() {
      return new readFile_args(this);
    }

    @Override
    public void clear() {
      this.filename = null;
    }

    public String getFilename() {
      return this.filename;
    }

    public readFile_args setFilename(String filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /** Returns true if field filename is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME:
        return getFilename();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILENAME:
        return isSetFilename();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readFile_args)
        return this.equals((readFile_args)that);
      return false;
    }

    public boolean equals(readFile_args that) {
      if (that == null)
        return false;

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(readFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readFile_args(");
      boolean first = true;

      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readFile_argsStandardSchemeFactory implements SchemeFactory {
      public readFile_argsStandardScheme getScheme() {
        return new readFile_argsStandardScheme();
      }
    }

    private static class readFile_argsStandardScheme extends StandardScheme<readFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename = iprot.readString();
                struct.setFilenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readFile_argsTupleSchemeFactory implements SchemeFactory {
      public readFile_argsTupleScheme getScheme() {
        return new readFile_argsTupleScheme();
      }
    }

    private static class readFile_argsTupleScheme extends TupleScheme<readFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilename()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFilename()) {
          oprot.writeString(struct.filename);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.filename = iprot.readString();
          struct.setFilenameIsSet(true);
        }
      }
    }

  }

  public static class readFile_result implements org.apache.thrift.TBase<readFile_result, readFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<readFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readFile_resultTupleSchemeFactory());
    }

    public RFile success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RFile.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readFile_result.class, metaDataMap);
    }

    public readFile_result() {
    }

    public readFile_result(
      RFile success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readFile_result(readFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new RFile(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public readFile_result deepCopy() {
      return new readFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public RFile getSuccess() {
      return this.success;
    }

    public readFile_result setSuccess(RFile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public readFile_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RFile)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readFile_result)
        return this.equals((readFile_result)that);
      return false;
    }

    public boolean equals(readFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(readFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readFile_resultStandardSchemeFactory implements SchemeFactory {
      public readFile_resultStandardScheme getScheme() {
        return new readFile_resultStandardScheme();
      }
    }

    private static class readFile_resultStandardScheme extends StandardScheme<readFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RFile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readFile_resultTupleSchemeFactory implements SchemeFactory {
      public readFile_resultTupleScheme getScheme() {
        return new readFile_resultTupleScheme();
      }
    }

    private static class readFile_resultTupleScheme extends TupleScheme<readFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RFile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class getDecision_args implements org.apache.thrift.TBase<getDecision_args, getDecision_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDecision_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDecision_args");

    private static final org.apache.thrift.protocol.TField TRANSACTION_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionMessage", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDecision_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDecision_argsTupleSchemeFactory());
    }

    public TransactionMessage transactionMessage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSACTION_MESSAGE((short)1, "transactionMessage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSACTION_MESSAGE
            return TRANSACTION_MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSACTION_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("transactionMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDecision_args.class, metaDataMap);
    }

    public getDecision_args() {
    }

    public getDecision_args(
      TransactionMessage transactionMessage)
    {
      this();
      this.transactionMessage = transactionMessage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDecision_args(getDecision_args other) {
      if (other.isSetTransactionMessage()) {
        this.transactionMessage = new TransactionMessage(other.transactionMessage);
      }
    }

    public getDecision_args deepCopy() {
      return new getDecision_args(this);
    }

    @Override
    public void clear() {
      this.transactionMessage = null;
    }

    public TransactionMessage getTransactionMessage() {
      return this.transactionMessage;
    }

    public getDecision_args setTransactionMessage(TransactionMessage transactionMessage) {
      this.transactionMessage = transactionMessage;
      return this;
    }

    public void unsetTransactionMessage() {
      this.transactionMessage = null;
    }

    /** Returns true if field transactionMessage is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactionMessage() {
      return this.transactionMessage != null;
    }

    public void setTransactionMessageIsSet(boolean value) {
      if (!value) {
        this.transactionMessage = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSACTION_MESSAGE:
        if (value == null) {
          unsetTransactionMessage();
        } else {
          setTransactionMessage((TransactionMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSACTION_MESSAGE:
        return getTransactionMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSACTION_MESSAGE:
        return isSetTransactionMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDecision_args)
        return this.equals((getDecision_args)that);
      return false;
    }

    public boolean equals(getDecision_args that) {
      if (that == null)
        return false;

      boolean this_present_transactionMessage = true && this.isSetTransactionMessage();
      boolean that_present_transactionMessage = true && that.isSetTransactionMessage();
      if (this_present_transactionMessage || that_present_transactionMessage) {
        if (!(this_present_transactionMessage && that_present_transactionMessage))
          return false;
        if (!this.transactionMessage.equals(that.transactionMessage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDecision_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransactionMessage()).compareTo(other.isSetTransactionMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactionMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionMessage, other.transactionMessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDecision_args(");
      boolean first = true;

      sb.append("transactionMessage:");
      if (this.transactionMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.transactionMessage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transactionMessage != null) {
        transactionMessage.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDecision_argsStandardSchemeFactory implements SchemeFactory {
      public getDecision_argsStandardScheme getScheme() {
        return new getDecision_argsStandardScheme();
      }
    }

    private static class getDecision_argsStandardScheme extends StandardScheme<getDecision_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDecision_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSACTION_MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transactionMessage = new TransactionMessage();
                struct.transactionMessage.read(iprot);
                struct.setTransactionMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDecision_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transactionMessage != null) {
          oprot.writeFieldBegin(TRANSACTION_MESSAGE_FIELD_DESC);
          struct.transactionMessage.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDecision_argsTupleSchemeFactory implements SchemeFactory {
      public getDecision_argsTupleScheme getScheme() {
        return new getDecision_argsTupleScheme();
      }
    }

    private static class getDecision_argsTupleScheme extends TupleScheme<getDecision_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDecision_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransactionMessage()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransactionMessage()) {
          struct.transactionMessage.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDecision_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.transactionMessage = new TransactionMessage();
          struct.transactionMessage.read(iprot);
          struct.setTransactionMessageIsSet(true);
        }
      }
    }

  }

  public static class getDecision_result implements org.apache.thrift.TBase<getDecision_result, getDecision_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDecision_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDecision_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDecision_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDecision_resultTupleSchemeFactory());
    }

    public TransactionMessage success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionMessage.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDecision_result.class, metaDataMap);
    }

    public getDecision_result() {
    }

    public getDecision_result(
      TransactionMessage success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDecision_result(getDecision_result other) {
      if (other.isSetSuccess()) {
        this.success = new TransactionMessage(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public getDecision_result deepCopy() {
      return new getDecision_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public TransactionMessage getSuccess() {
      return this.success;
    }

    public getDecision_result setSuccess(TransactionMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public getDecision_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TransactionMessage)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDecision_result)
        return this.equals((getDecision_result)that);
      return false;
    }

    public boolean equals(getDecision_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDecision_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDecision_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDecision_resultStandardSchemeFactory implements SchemeFactory {
      public getDecision_resultStandardScheme getScheme() {
        return new getDecision_resultStandardScheme();
      }
    }

    private static class getDecision_resultStandardScheme extends StandardScheme<getDecision_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDecision_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TransactionMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDecision_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDecision_resultTupleSchemeFactory implements SchemeFactory {
      public getDecision_resultTupleScheme getScheme() {
        return new getDecision_resultTupleScheme();
      }
    }

    private static class getDecision_resultTupleScheme extends TupleScheme<getDecision_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDecision_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDecision_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TransactionMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

}
